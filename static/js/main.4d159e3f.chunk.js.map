{"version":3,"sources":["countries.js","App.js","index.js"],"names":["QUERY","gql","Countries","useState","countrySearch","setCountrySearch","useLazyQuery","searchCountry","data","id","type","placeholder","maxLength","onChange","event","target","value","onClick","variables","code","toUpperCase","className","country","name","native","capital","currency","emoji","languages","map","language","App","client","ApolloClient","uri","cache","InMemoryCache","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAIMA,EAAQC,YAAH,iOAoEIC,MApDf,WAAsB,IAAD,EACyBC,mBAAS,IADlC,mBACVC,EADU,KACKC,EADL,OAEeC,YAAaN,GAF5B,mBAEVO,EAFU,KAEMC,EAFN,KAEMA,KAEvB,OACI,qBAAKC,GAAG,OAAR,SACI,sBAAKA,GAAG,UAAR,UACI,gCACI,uBACIC,KAAK,OACLC,YAAY,eACZC,UAAW,EACXC,SAAU,SAACC,GACPT,EAAiBS,EAAMC,OAAOC,UAN1C,OAUI,wBACIC,QAAS,WACLV,EAAe,CACXW,UAAW,CAACC,KAAMf,EAAcgB,kBAH5C,4BAQJ,8BACKZ,GACG,gCACI,uBACA,qBAAKa,UAAU,QAAf,kBAAiC,qBAAKA,UAAU,QAAf,SAAwBb,EAAKc,QAAQC,OAAW,uBACjF,qBAAKF,UAAU,QAAf,oBAAmC,qBAAKA,UAAU,QAAf,SAAwBb,EAAKc,QAAQE,SAAa,uBACrF,qBAAKH,UAAU,QAAf,qBAAoC,qBAAKA,UAAU,QAAf,SAAwBb,EAAKc,QAAQG,UAAc,uBACvF,qBAAKJ,UAAU,QAAf,sBAAqC,qBAAKA,UAAU,QAAf,SAAwBb,EAAKc,QAAQI,WAAe,uBACzF,qBAAKL,UAAU,QAAf,kBAAiC,qBAAKA,UAAU,QAAf,SAAwBb,EAAKc,QAAQK,QAAY,uBAClF,sBAAKlB,GAAG,YAAR,UACI,qBAAKY,UAAU,QAAf,uBACA,qBAAKA,UAAU,QAAf,SACKb,EAAKc,QAAQM,UAAUC,KAAI,SAAAC,GAAQ,OAChC,8BACKA,EAASP,0BC3CvCQ,MAbf,WACI,IAAMC,EAAS,IAAIC,IAAa,CAC5BC,IAAK,qCACLC,MAAO,IAAIC,MAGf,OACI,cAACC,EAAA,EAAD,CAAgBL,OAAQA,EAAxB,SACI,cAAC,EAAD,OCPZM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4d159e3f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {useLazyQuery, gql} from \"@apollo/client\";\r\nimport './style.css';\r\n\r\nconst QUERY = gql`\r\n  query Country($code: ID!) {\r\n    country(code: $code) {\r\n      name\r\n      native\r\n      capital\r\n      emoji\r\n      currency\r\n      languages {\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Countries() {\r\n    const [countrySearch, setCountrySearch] = useState(\"\");\r\n    const [searchCountry, {data}] = useLazyQuery(QUERY);\r\n\r\n    return (\r\n        <div id=\"page\">\r\n            <div id=\"content\">\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"COUNTRY CODE\"\r\n                        maxLength={2}\r\n                        onChange={(event) => {\r\n                            setCountrySearch(event.target.value);\r\n                        }}\r\n                    />\r\n                    &nbsp;\r\n                    <button\r\n                        onClick={() => {\r\n                            searchCountry ({\r\n                                variables: {code: countrySearch.toUpperCase ()},\r\n                            });\r\n                        }}\r\n                    >GET COUNTRY</button>\r\n                </div>\r\n                <div>\r\n                    {data && (\r\n                        <div>\r\n                            <br/>\r\n                            <div className=\"title\">Name</div><div className=\"value\">{data.country.name}</div><hr/>\r\n                            <div className=\"title\">Native</div><div className=\"value\">{data.country.native}</div><hr/>\r\n                            <div className=\"title\">Capital</div><div className=\"value\">{data.country.capital}</div><hr/>\r\n                            <div className=\"title\">Currency</div><div className=\"value\">{data.country.currency}</div><hr/>\r\n                            <div className=\"title\">Flag</div><div className=\"value\">{data.country.emoji}</div><hr/>\r\n                            <div id=\"languages\">\r\n                                <div className=\"title\">Languages</div>\r\n                                <div className=\"value\">\r\n                                    {data.country.languages.map(language => (\r\n                                        <div>\r\n                                            {language.name}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Countries;","import { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport Countries from \"./countries\";\n\nfunction App() {\n    const client = new ApolloClient({\n        uri: \"https://countries.trevorblades.com\",\n        cache: new InMemoryCache()\n    });\n\n    return (\n        <ApolloProvider client={client}>\n            <Countries />\n        </ApolloProvider>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}